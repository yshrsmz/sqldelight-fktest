plugins {
    id 'kotlin-multiplatform'
}
repositories {
    google()
    jcenter()
    mavenCentral()
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.squareup.sqldelight'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'org.jetbrains.kotlin.mpp_app_android'
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs += 'src/androidMain/kotlin'
            res.srcDirs += 'src/androidMain/res'
        }
        test {
            java.srcDirs += 'src/androidTest/kotlin'
            resources.srcDirs += 'src/androidTest/resources'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true

            all {
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                    outputs.upToDateWhen { false }
                    showStandardStreams = true
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha05'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta1'
}

kotlin {
    android("android")
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework()
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependsOn commonMain
            dependencies {
                implementation kotlin('stdlib')

                implementation "com.squareup.sqldelight:android-driver:${SQLDELIGHT_VERSION}"
            }
        }
        androidTest {
            dependsOn androidMain
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')

                implementation "junit:junit:4.12"
                implementation 'androidx.test:core:1.2.0'
                implementation 'androidx.test.ext:junit:1.1.1'
                implementation "org.robolectric:robolectric:4.3"
            }
        }
        iosMain {
            dependencies {
                implementation "com.squareup.sqldelight:ios-driver:${SQLDELIGHT_VERSION}"
            }
        }
        iosTest {
        }
    }
}

sqldelight {
    Database {
        packageName = "com.codingfeline.fktest"
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    def bin = kotlin.targets.ios.compilations.test.target.binaries.findExecutable("test", "DEBUG")
    dependsOn bin.linkTask

    doLast {
        def bin2 = kotlin.targets.ios.compilations.test.target.binaries.findExecutable("test", "DEBUG")
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, bin2.outputFile.absolutePath
        }
    }
}
